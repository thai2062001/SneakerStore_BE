generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  role_id       Int       @id @default(autoincrement())
  role_name     String    @unique
  users         User[]
}

model User {
  user_id       Int       @id @default(autoincrement())
  username      String?   @unique
  email         String    @unique
  password      String
  phone_number  String
  gender        String
  role_id       Int
  addresses     Address[]
  orders        Order[]
  reviews       Review[]
  favorites     Favorite[]
  carts         Cart[]
  role          Role      @relation(fields: [role_id], references: [role_id])
   notifications  Notification[] 
}

model Address {
  address_id    Int      @id @default(autoincrement())
  user_id       Int
  street        String
  city          String
  country       String
  user          User     @relation(fields: [user_id], references: [user_id])
}

model Brand {
  brand_id      Int       @id @default(autoincrement())
  name          String
  products      Product[]
  logo_url      String?
}

model Category {
  category_id   Int          @id @default(autoincrement())
  name          String
  products      Product[]
}

model Product {
  product_id   Int            @id @default(autoincrement())
  name         String
  description  String
  price        Float
  image_url    String
  brand_id     Int
  gender       String
  category_id  Int?

  brand        Brand          @relation(fields: [brand_id], references: [brand_id])
  category     Category?      @relation(fields: [category_id], references: [category_id])
  orderItems   OrderItem[]
  reviews      Review[]
  stock        Stock[]
  favorites    Favorite[]
  images       ProductImage[]
  cartItems    CartItem[]  @relation("ProductCartItems")
}
model ProductImage {
  image_id         Int       @id @default(autoincrement())
  product_id       Int
  image_url        String
  product          Product   @relation(fields: [product_id], references: [product_id])
}

model CartItem {
  cartItem_id  Int       @id @default(autoincrement())
  cart_id      Int
  product_id   Int
  quantity     Int
    color        String?   // Add color field
  size         String?   // Add size field
  product      Product    @relation(fields: [product_id], references: [product_id], name: "ProductCartItems")
  cart         Cart      @relation(fields: [cart_id], references: [cart_id])
  @@unique([cart_id, product_id])
}



model Cart {
  cart_id       Int       @id @default(autoincrement())
  user_id       Int
  createdAt     DateTime  @default(now())
  user          User      @relation(fields: [user_id], references: [user_id])
  cartItems     CartItem[]

  @@unique([user_id])
}



model Stock {
  stock_id      Int      @id @default(autoincrement())
  product_id    Int
  size          String
  color         String
  quantity      Int
  product       Product  @relation(fields: [product_id], references: [product_id])

  @@unique([product_id, size, color])  // Unique constraint
}

model Favorite {
  favorite_id   Int       @id @default(autoincrement())
  user_id       Int
  product_id    Int
  user          User      @relation(fields: [user_id], references: [user_id])
  product       Product   @relation(fields: [product_id], references: [product_id])

  @@unique([user_id, product_id])
}

model Order {
  order_id      Int        @id @default(autoincrement())
  user_id       Int
  status        String     // New field for tracking order status
  totalAmount   Float
  createdAt     DateTime   @default(now())
  isCanceled    Boolean    @default(false) // New field for tracking cancellation status
  canceledAt    DateTime?  // New field for the time of cancellation
  user          User       @relation(fields: [user_id], references: [user_id])
  orderItems    OrderItem[]
  invoice       Invoice?
}

model Notification {
  notification_id Int       @id @default(autoincrement())
  user_id         Int
  type            String    // Type of notification (e.g., "password_change", "order_success")
  message         String    // Notification message
  isRead    Boolean  @default(false)
  createdAt       DateTime  @default(now())
  user            User      @relation(fields: [user_id], references: [user_id])
}


model OrderItem {
  orderItem_id  Int      @id @default(autoincrement())
  orderId       Int
  productId     Int
  quantity      Int
  price         Float
  size          String
  color         String

  order         Order    @relation(fields: [orderId], references: [order_id])
  product       Product  @relation(fields: [productId], references: [product_id])
}

model Review {
  review_id     Int      @id @default(autoincrement())
  productId     Int
  userId        Int
  rating        Int
  comment       String
  createdAt     DateTime @default(now())
  product       Product  @relation(fields: [productId], references: [product_id])
  user          User     @relation(fields: [userId], references: [user_id])
}

model Invoice {
  invoice_id    Int      @id @default(autoincrement())
  order_id      Int      @unique
  date          DateTime @default(now())
  amount        Float
  order         Order    @relation(fields: [order_id], references: [order_id])
}
